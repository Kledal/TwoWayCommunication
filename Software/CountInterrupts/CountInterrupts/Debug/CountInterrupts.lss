
CountInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001c0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044e  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000162  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000138  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  8a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitInterrupt>:
		PORTB = ~interrupts;
    }
}

void InitInterrupt() {
	MCUCR = 1<<ISC00 && 1<<ISC11;  // INT0:Falling edge
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	85 bf       	out	0x35, r24	; 53
	GICR |= 0b11000000;  //enable interrupt 0 AND INT1
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 6c       	ori	r24, 0xC0	; 192
  9a:	8b bf       	out	0x3b, r24	; 59
}
  9c:	08 95       	ret

0000009e <main>:
int interrupts = 0;
int counting = 0;

int main(void)
{
	InitInterrupt();
  9e:	0e 94 49 00 	call	0x92	; 0x92 <InitInterrupt>
	DDRB = 0xff; // Make PORTB output.
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111; // Sets all bits.
  a6:	88 bb       	out	0x18, r24	; 24
	
	sei(); //enables interrupts
  a8:	78 94       	sei
    while(1) {
		if (counting) {
			_delay_ms(1000);
			counting = 0;
		}
		PORTB = ~interrupts;
  aa:	e2 e6       	ldi	r30, 0x62	; 98
  ac:	f0 e0       	ldi	r31, 0x00	; 0
	DDRB = 0xff; // Make PORTB output.
	PORTB = 0b11111111; // Sets all bits.
	
	sei(); //enables interrupts
    while(1) {
		if (counting) {
  ae:	80 91 60 00 	lds	r24, 0x0060
  b2:	90 91 61 00 	lds	r25, 0x0061
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	69 f0       	breq	.+26     	; 0xd4 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	9f e3       	ldi	r25, 0x3F	; 63
  be:	ab e0       	ldi	r26, 0x0B	; 11
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	a0 40       	sbci	r26, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x2c>
  ca:	00 00       	nop
			_delay_ms(1000);
			counting = 0;
  cc:	10 92 61 00 	sts	0x0061, r1
  d0:	10 92 60 00 	sts	0x0060, r1
		}
		PORTB = ~interrupts;
  d4:	80 81       	ld	r24, Z
  d6:	80 95       	com	r24
  d8:	88 bb       	out	0x18, r24	; 24
    }
  da:	e9 cf       	rjmp	.-46     	; 0xae <main+0x10>

000000dc <__vector_1>:
void InitInterrupt() {
	MCUCR = 1<<ISC00 && 1<<ISC11;  // INT0:Falling edge
	GICR |= 0b11000000;  //enable interrupt 0 AND INT1
}

ISR(INT0_vect) { //PORT D ben 2
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	//increase countet interrupts
	if (counting == 1)
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	90 91 61 00 	lds	r25, 0x0061
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 05       	cpc	r25, r1
  f6:	49 f4       	brne	.+18     	; 0x10a <__vector_1+0x2e>
		interrupts++;
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	90 91 63 00 	lds	r25, 0x0063
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 63 00 	sts	0x0063, r25
 106:	80 93 62 00 	sts	0x0062, r24
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_2>:
ISR(INT1_vect) { //PORT D ben 3
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	counting = 1; // start counting
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 61 00 	sts	0x0061, r25
 12e:	80 93 60 00 	sts	0x0060, r24
	interrupts = 0; // reset counts
 132:	10 92 63 00 	sts	0x0063, r1
 136:	10 92 62 00 	sts	0x0062, r1
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
